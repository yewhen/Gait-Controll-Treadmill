
Gait Control Treadmill.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000009d2  00000a66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a8  00800104  00800104  00000a6a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ac8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001040  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c5c  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083c  00000000  00000000  00002884  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  000030c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065a  00000000  00000000  00003334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000525  00000000  00000000  0000398e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003eb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_1>
   8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_2>
   c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_3>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_14>
  3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_15>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 ed       	ldi	r30, 0xD2	; 210
  c8:	f9 e0       	ldi	r31, 0x09	; 9
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 30       	cpi	r26, 0x04	; 4
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e0       	ldi	r26, 0x04	; 4
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ac 3a       	cpi	r26, 0xAC	; 172
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  ea:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <USART_Init>:
    sensors[1].timer += 65535;
}
ISR(TIM4_OVF_vect){
    // increment
    sensors[2].timer += 65535;
}
  f2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  fa:	88 e1       	ldi	r24, 0x18	; 24
  fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 106:	08 95       	ret

00000108 <USART_Transmit>:
 108:	e0 ec       	ldi	r30, 0xC0	; 192
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	90 81       	ld	r25, Z
 10e:	95 ff       	sbrs	r25, 5
 110:	fd cf       	rjmp	.-6      	; 0x10c <USART_Transmit+0x4>
 112:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 116:	08 95       	ret

00000118 <USART_putstring>:
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	ec 01       	movw	r28, r24
 11e:	88 81       	ld	r24, Y
 120:	88 23       	and	r24, r24
 122:	31 f0       	breq	.+12     	; 0x130 <USART_putstring+0x18>
 124:	21 96       	adiw	r28, 0x01	; 1
 126:	0e 94 84 00 	call	0x108	; 0x108 <USART_Transmit>
 12a:	89 91       	ld	r24, Y+
 12c:	81 11       	cpse	r24, r1
 12e:	fb cf       	rjmp	.-10     	; 0x126 <USART_putstring+0xe>
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <__vector_14>:
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	1c 9a       	sbi	0x03, 4	; 3
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_15>:
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	1c 9a       	sbi	0x03, 4	; 3
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <__vector_1>:

ISR(INT0_vect){
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
	LED_TOGGLE;
 16c:	1d 9a       	sbi	0x03, 5	; 3
        // reset counter
        TCNT1 = 0;
        // set flag
        sensors[0].echoDone = 1;
    }*/
}
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_2>:

ISR(INT1_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	2f 93       	push	r18
 184:	3f 93       	push	r19
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
	if (PIND & (1<<PORTD3)){
 192:	4b 9b       	sbis	0x09, 3	; 9
 194:	0b c0       	rjmp	.+22     	; 0x1ac <__vector_2+0x34>
        // rising edge: start timer3(16-bit)
        TCCR3B |= (1<<CS30);
 196:	e1 e9       	ldi	r30, 0x91	; 145
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	80 83       	st	Z, r24

        TIMSK3 |= (1<<TOIE3);
 1a0:	e1 e7       	ldi	r30, 0x71	; 113
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	81 60       	ori	r24, 0x01	; 1
 1a8:	80 83       	st	Z, r24
 1aa:	19 c0       	rjmp	.+50     	; 0x1de <__vector_2+0x66>
	}
	else{
        // falling edge: stop timer
        TCCR3B &= ~(1<<CS30);
 1ac:	e1 e9       	ldi	r30, 0x91	; 145
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	8e 7f       	andi	r24, 0xFE	; 254
 1b4:	80 83       	st	Z, r24
        // calculate time passed
        sensors[1].timer += TCNT3;
 1b6:	a4 e9       	ldi	r26, 0x94	; 148
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	8d 91       	ld	r24, X+
 1bc:	9c 91       	ld	r25, X
 1be:	11 97       	sbiw	r26, 0x01	; 1
 1c0:	e4 e0       	ldi	r30, 0x04	; 4
 1c2:	f1 e0       	ldi	r31, 0x01	; 1
 1c4:	24 8d       	ldd	r18, Z+28	; 0x1c
 1c6:	35 8d       	ldd	r19, Z+29	; 0x1d
 1c8:	82 0f       	add	r24, r18
 1ca:	93 1f       	adc	r25, r19
 1cc:	95 8f       	std	Z+29, r25	; 0x1d
 1ce:	84 8f       	std	Z+28, r24	; 0x1c
        // reset counter
        TCNT3 = 0;
 1d0:	11 96       	adiw	r26, 0x01	; 1
 1d2:	1c 92       	st	X, r1
 1d4:	1e 92       	st	-X, r1
        // set flag
        sensors[1].echoDone = 1;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	97 8f       	std	Z+31, r25	; 0x1f
 1dc:	86 8f       	std	Z+30, r24	; 0x1e
	}
}
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__vector_3>:

ISR(PCINT0_vect){
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	2f 93       	push	r18
 204:	3f 93       	push	r19
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
 20a:	af 93       	push	r26
 20c:	bf 93       	push	r27
 20e:	ef 93       	push	r30
 210:	ff 93       	push	r31
    if (PINB & (1<<PORTB4)){
 212:	1c 9b       	sbis	0x03, 4	; 3
 214:	0b c0       	rjmp	.+22     	; 0x22c <__vector_3+0x34>
        // rising edge: start timer3(16-bit)
        TCCR4B |= (1<<CS40);
 216:	e1 ea       	ldi	r30, 0xA1	; 161
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	81 60       	ori	r24, 0x01	; 1
 21e:	80 83       	st	Z, r24
        
        TIMSK4 |= (1<<TOIE4);
 220:	e2 e7       	ldi	r30, 0x72	; 114
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	81 60       	ori	r24, 0x01	; 1
 228:	80 83       	st	Z, r24
 22a:	19 c0       	rjmp	.+50     	; 0x25e <__vector_3+0x66>
    }
    else{
        // falling edge: stop timer
        TCCR4B &= ~(1<<CS40);
 22c:	e1 ea       	ldi	r30, 0xA1	; 161
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	8e 7f       	andi	r24, 0xFE	; 254
 234:	80 83       	st	Z, r24
        // calculate time passed
        sensors[2].timer += TCNT4;
 236:	a4 ea       	ldi	r26, 0xA4	; 164
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	8d 91       	ld	r24, X+
 23c:	9c 91       	ld	r25, X
 23e:	11 97       	sbiw	r26, 0x01	; 1
 240:	e4 e0       	ldi	r30, 0x04	; 4
 242:	f1 e0       	ldi	r31, 0x01	; 1
 244:	20 ad       	ldd	r18, Z+56	; 0x38
 246:	31 ad       	ldd	r19, Z+57	; 0x39
 248:	82 0f       	add	r24, r18
 24a:	93 1f       	adc	r25, r19
 24c:	91 af       	std	Z+57, r25	; 0x39
 24e:	80 af       	std	Z+56, r24	; 0x38
        // reset counter
        TCNT4 = 0;
 250:	11 96       	adiw	r26, 0x01	; 1
 252:	1c 92       	st	X, r1
 254:	1e 92       	st	-X, r1
        // set flag
        sensors[2].echoDone = 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	93 af       	std	Z+59, r25	; 0x3b
 25c:	82 af       	std	Z+58, r24	; 0x3a
    }
}
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	bf 91       	pop	r27
 264:	af 91       	pop	r26
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	3f 91       	pop	r19
 26c:	2f 91       	pop	r18
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <main>:
        _delay_ms(70);
    }
    return 0;
}*/

int main(){
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
 280:	28 97       	sbiw	r28, 0x08	; 8
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61

	//char s2[] = "hello";
	DDRB |= (1<<DDB5);
 28c:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= (1<<DDB4);
 28e:	24 9a       	sbi	0x04, 4	; 4
    PWM_Init_8();
 290:	0e 94 a0 01 	call	0x340	; 0x340 <PWM_Init_8>
	Sensor_Init();
 294:	0e 94 b3 01 	call	0x366	; 0x366 <Sensor_Init>
	USART_Init(MYUBBR);
 298:	87 e6       	ldi	r24, 0x67	; 103
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_Init>
	sei();
 2a0:	78 94       	sei
	char space[] = "  ";
 2a2:	80 e2       	ldi	r24, 0x20	; 32
 2a4:	90 e2       	ldi	r25, 0x20	; 32
 2a6:	9a 83       	std	Y+2, r25	; 0x02
 2a8:	89 83       	std	Y+1, r24	; 0x01
 2aa:	1b 82       	std	Y+3, r1	; 0x03
		PORTB &= ~(1<<PINB3);
		
		//_delay_us(15);
		//do{
			//_delay_ms(500);
		cur = sensors[0].timer / 58;
 2ac:	0f 2e       	mov	r0, r31
 2ae:	f4 e0       	ldi	r31, 0x04	; 4
 2b0:	af 2e       	mov	r10, r31
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	bf 2e       	mov	r11, r31
 2b6:	f0 2d       	mov	r31, r0
		//LED_TOGGLE;
		//}while (cur <= 2 || cur >= 400);

		//cur = sensors[0].pulse / 58;
		
		sprintf(s, "%u", cur);
 2b8:	0f 2e       	mov	r0, r31
 2ba:	fa e3       	ldi	r31, 0x3A	; 58
 2bc:	cf 2e       	mov	r12, r31
 2be:	d1 2c       	mov	r13, r1
 2c0:	f0 2d       	mov	r31, r0
 2c2:	0f 2e       	mov	r0, r31
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	ef 2e       	mov	r14, r31
 2c8:	f1 e0       	ldi	r31, 0x01	; 1
 2ca:	ff 2e       	mov	r15, r31
 2cc:	f0 2d       	mov	r31, r0
 2ce:	8e 01       	movw	r16, r28
 2d0:	0c 5f       	subi	r16, 0xFC	; 252
 2d2:	1f 4f       	sbci	r17, 0xFF	; 255
	sei();
	char space[] = "  ";
	unsigned int cur = 0;
    while (1){
		char s[5];
		PWM_Increase_duty_8();
 2d4:	0e 94 97 01 	call	0x32e	; 0x32e <PWM_Increase_duty_8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d8:	2f e3       	ldi	r18, 0x3F	; 63
 2da:	8d e0       	ldi	r24, 0x0D	; 13
 2dc:	93 e0       	ldi	r25, 0x03	; 3
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	90 40       	sbci	r25, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <main+0x66>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <main+0x70>
 2e8:	00 00       	nop
		_delay_ms(1000);
		//char f[3];
		//int idx;
		// Trig Signal
		PORTB |= (1<<PINB3); 
 2ea:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	e3 e0       	ldi	r30, 0x03	; 3
 2ee:	ea 95       	dec	r30
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <main+0x76>
 2f2:	00 00       	nop
		_delay_us(10); 
		PORTB &= ~(1<<PINB3);
 2f4:	2b 98       	cbi	0x05, 3	; 5
		
		//_delay_us(15);
		//do{
			//_delay_ms(500);
		cur = sensors[0].timer / 58;
 2f6:	f5 01       	movw	r30, r10
 2f8:	80 81       	ld	r24, Z
 2fa:	91 81       	ldd	r25, Z+1	; 0x01
		//LED_TOGGLE;
		//}while (cur <= 2 || cur >= 400);

		//cur = sensors[0].pulse / 58;
		
		sprintf(s, "%u", cur);
 2fc:	b6 01       	movw	r22, r12
 2fe:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>
 302:	7f 93       	push	r23
 304:	6f 93       	push	r22
 306:	ff 92       	push	r15
 308:	ef 92       	push	r14
 30a:	1f 93       	push	r17
 30c:	0f 93       	push	r16
 30e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <sprintf>
		//sprintf(f, "%d", sensors[0].flag);
		USART_putstring(s);
 312:	c8 01       	movw	r24, r16
 314:	0e 94 8c 00 	call	0x118	; 0x118 <USART_putstring>
		USART_putstring(space);
 318:	ce 01       	movw	r24, r28
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	0e 94 8c 00 	call	0x118	; 0x118 <USART_putstring>
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	d3 cf       	rjmp	.-90     	; 0x2d4 <main+0x5c>

0000032e <PWM_Increase_duty_8>:
	TCCR1B &= ~(1<<CS12);
	TCCR1B &= ~(1<<CS10);
	TIMSK1 |= (1<<OCIE1A) | (1<<OCIE1B);
	 
	OCR1A = (F_CPU / PRESCALE / FREQ) - 1; // 5KHz
	OCR1B = (F_CPU / PRESCALE / FREQ) * 0.5 - 1;
 32e:	97 b5       	in	r25, 0x27	; 39
 330:	88 b5       	in	r24, 0x28	; 40
 332:	89 17       	cp	r24, r25
 334:	10 f4       	brcc	.+4      	; 0x33a <PWM_Increase_duty_8+0xc>
 336:	8f 5f       	subi	r24, 0xFF	; 255
 338:	01 c0       	rjmp	.+2      	; 0x33c <PWM_Increase_duty_8+0xe>
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	88 bd       	out	0x28, r24	; 40
 33e:	08 95       	ret

00000340 <PWM_Init_8>:
}

void PWM_Init_8(void){
	TCCR0A |= (1<<WGM01); // CTC mode
 340:	84 b5       	in	r24, 0x24	; 36
 342:	82 60       	ori	r24, 0x02	; 2
 344:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) | (1<<CS00); 
 346:	85 b5       	in	r24, 0x25	; 37
 348:	83 60       	ori	r24, 0x03	; 3
 34a:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS02);
 34c:	85 b5       	in	r24, 0x25	; 37
 34e:	8b 7f       	andi	r24, 0xFB	; 251
 350:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0A) | (1<<OCIE0B);
 352:	ee e6       	ldi	r30, 0x6E	; 110
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	86 60       	ori	r24, 0x06	; 6
 35a:	80 83       	st	Z, r24
	 
	OCR0A = (F_CPU / PRESCALE / FREQ) - 1; // 5KHz
 35c:	81 e3       	ldi	r24, 0x31	; 49
 35e:	87 bd       	out	0x27, r24	; 39
	OCR0B = (F_CPU / PRESCALE / FREQ) * 0.5 - 1;
 360:	88 e1       	ldi	r24, 0x18	; 24
 362:	88 bd       	out	0x28, r24	; 40
 364:	08 95       	ret

00000366 <Sensor_Init>:

void Sensor_Init(){
	//input(0), output(1)
	int idx;
	// Trig Pin Setup: PB3
	DDRB |= (1<<DDB3);
 366:	23 9a       	sbi	0x04, 3	; 4
    
	// Echo Pin Setup: PD2(EXTINT0), PD3(EXTINT1), PB5(PCINT0)
	DDRD &= ~(1<<DDD2); 
 368:	52 98       	cbi	0x0a, 2	; 10
	//DDRD &= ~(1<<DDD3);
	//DDRB &= ~(1<<DDB4);

	// Turn on the pull-up
	PORTD |= (1<<PORTD2) | (1<<PORTD3);
 36a:	8b b1       	in	r24, 0x0b	; 11
 36c:	8c 60       	ori	r24, 0x0C	; 12
 36e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 370:	83 ed       	ldi	r24, 0xD3	; 211
 372:	90 e3       	ldi	r25, 0x30	; 48
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <Sensor_Init+0xe>
 378:	00 c0       	rjmp	.+0      	; 0x37a <Sensor_Init+0x14>
 37a:	00 00       	nop
	//PORTB |= (1<<PORTB4);
	_delay_ms(50);

	// Enable the Interrupt
	EICRA |= (1<<ISC00) | (1<<ISC10); // Set INT0 & INT1 to trigger on ANY logic change
 37c:	e9 e6       	ldi	r30, 0x69	; 105
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	85 60       	ori	r24, 0x05	; 5
 384:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0) | (1<<INT1);  // Turns on INT0 & INT1
 386:	8d b3       	in	r24, 0x1d	; 29
 388:	83 60       	ori	r24, 0x03	; 3
 38a:	8d bb       	out	0x1d, r24	; 29
	
	//PCICR |= (1<<PCIE0);
	//PCMSK0 |= (1<<PCINT4);

	for (idx = 0; idx < NUM_SENSOR; idx++){
		sensors[idx].timer = 0;
 38c:	e8 e5       	ldi	r30, 0x58	; 88
 38e:	f1 e0       	ldi	r31, 0x01	; 1
 390:	11 82       	std	Z+1, r1	; 0x01
 392:	10 82       	st	Z, r1
		sensors[idx].echoDone = 0;
 394:	13 82       	std	Z+3, r1	; 0x03
 396:	12 82       	std	Z+2, r1	; 0x02
	
	//PCICR |= (1<<PCIE0);
	//PCMSK0 |= (1<<PCINT4);

	for (idx = 0; idx < NUM_SENSOR; idx++){
		sensors[idx].timer = 0;
 398:	15 8e       	std	Z+29, r1	; 0x1d
 39a:	14 8e       	std	Z+28, r1	; 0x1c
		sensors[idx].echoDone = 0;
 39c:	17 8e       	std	Z+31, r1	; 0x1f
 39e:	16 8e       	std	Z+30, r1	; 0x1e
	
	//PCICR |= (1<<PCIE0);
	//PCMSK0 |= (1<<PCINT4);

	for (idx = 0; idx < NUM_SENSOR; idx++){
		sensors[idx].timer = 0;
 3a0:	11 ae       	std	Z+57, r1	; 0x39
 3a2:	10 ae       	std	Z+56, r1	; 0x38
		sensors[idx].echoDone = 0;
 3a4:	13 ae       	std	Z+59, r1	; 0x3b
 3a6:	12 ae       	std	Z+58, r1	; 0x3a
 3a8:	08 95       	ret

000003aa <__divmodhi4>:
 3aa:	97 fb       	bst	r25, 7
 3ac:	07 2e       	mov	r0, r23
 3ae:	16 f4       	brtc	.+4      	; 0x3b4 <__divmodhi4+0xa>
 3b0:	00 94       	com	r0
 3b2:	07 d0       	rcall	.+14     	; 0x3c2 <__divmodhi4_neg1>
 3b4:	77 fd       	sbrc	r23, 7
 3b6:	09 d0       	rcall	.+18     	; 0x3ca <__divmodhi4_neg2>
 3b8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__udivmodhi4>
 3bc:	07 fc       	sbrc	r0, 7
 3be:	05 d0       	rcall	.+10     	; 0x3ca <__divmodhi4_neg2>
 3c0:	3e f4       	brtc	.+14     	; 0x3d0 <__divmodhi4_exit>

000003c2 <__divmodhi4_neg1>:
 3c2:	90 95       	com	r25
 3c4:	81 95       	neg	r24
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	08 95       	ret

000003ca <__divmodhi4_neg2>:
 3ca:	70 95       	com	r23
 3cc:	61 95       	neg	r22
 3ce:	7f 4f       	sbci	r23, 0xFF	; 255

000003d0 <__divmodhi4_exit>:
 3d0:	08 95       	ret

000003d2 <__udivmodhi4>:
 3d2:	aa 1b       	sub	r26, r26
 3d4:	bb 1b       	sub	r27, r27
 3d6:	51 e1       	ldi	r21, 0x11	; 17
 3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <__udivmodhi4_ep>

000003da <__udivmodhi4_loop>:
 3da:	aa 1f       	adc	r26, r26
 3dc:	bb 1f       	adc	r27, r27
 3de:	a6 17       	cp	r26, r22
 3e0:	b7 07       	cpc	r27, r23
 3e2:	10 f0       	brcs	.+4      	; 0x3e8 <__udivmodhi4_ep>
 3e4:	a6 1b       	sub	r26, r22
 3e6:	b7 0b       	sbc	r27, r23

000003e8 <__udivmodhi4_ep>:
 3e8:	88 1f       	adc	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	5a 95       	dec	r21
 3ee:	a9 f7       	brne	.-22     	; 0x3da <__udivmodhi4_loop>
 3f0:	80 95       	com	r24
 3f2:	90 95       	com	r25
 3f4:	bc 01       	movw	r22, r24
 3f6:	cd 01       	movw	r24, r26
 3f8:	08 95       	ret

000003fa <sprintf>:
 3fa:	ae e0       	ldi	r26, 0x0E	; 14
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	e3 e0       	ldi	r30, 0x03	; 3
 400:	f2 e0       	ldi	r31, 0x02	; 2
 402:	0c 94 be 04 	jmp	0x97c	; 0x97c <__prologue_saves__+0x1c>
 406:	0d 89       	ldd	r16, Y+21	; 0x15
 408:	1e 89       	ldd	r17, Y+22	; 0x16
 40a:	86 e0       	ldi	r24, 0x06	; 6
 40c:	8c 83       	std	Y+4, r24	; 0x04
 40e:	1a 83       	std	Y+2, r17	; 0x02
 410:	09 83       	std	Y+1, r16	; 0x01
 412:	8f ef       	ldi	r24, 0xFF	; 255
 414:	9f e7       	ldi	r25, 0x7F	; 127
 416:	9e 83       	std	Y+6, r25	; 0x06
 418:	8d 83       	std	Y+5, r24	; 0x05
 41a:	ae 01       	movw	r20, r28
 41c:	47 5e       	subi	r20, 0xE7	; 231
 41e:	5f 4f       	sbci	r21, 0xFF	; 255
 420:	6f 89       	ldd	r22, Y+23	; 0x17
 422:	78 8d       	ldd	r23, Y+24	; 0x18
 424:	ce 01       	movw	r24, r28
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	0e 94 1f 02 	call	0x43e	; 0x43e <vfprintf>
 42c:	ef 81       	ldd	r30, Y+7	; 0x07
 42e:	f8 85       	ldd	r31, Y+8	; 0x08
 430:	e0 0f       	add	r30, r16
 432:	f1 1f       	adc	r31, r17
 434:	10 82       	st	Z, r1
 436:	2e 96       	adiw	r28, 0x0e	; 14
 438:	e4 e0       	ldi	r30, 0x04	; 4
 43a:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__epilogue_restores__+0x1c>

0000043e <vfprintf>:
 43e:	ab e0       	ldi	r26, 0x0B	; 11
 440:	b0 e0       	ldi	r27, 0x00	; 0
 442:	e5 e2       	ldi	r30, 0x25	; 37
 444:	f2 e0       	ldi	r31, 0x02	; 2
 446:	0c 94 b0 04 	jmp	0x960	; 0x960 <__prologue_saves__>
 44a:	6c 01       	movw	r12, r24
 44c:	7b 01       	movw	r14, r22
 44e:	8a 01       	movw	r16, r20
 450:	fc 01       	movw	r30, r24
 452:	17 82       	std	Z+7, r1	; 0x07
 454:	16 82       	std	Z+6, r1	; 0x06
 456:	83 81       	ldd	r24, Z+3	; 0x03
 458:	81 ff       	sbrs	r24, 1
 45a:	cc c1       	rjmp	.+920    	; 0x7f4 <vfprintf+0x3b6>
 45c:	ce 01       	movw	r24, r28
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	3c 01       	movw	r6, r24
 462:	f6 01       	movw	r30, r12
 464:	93 81       	ldd	r25, Z+3	; 0x03
 466:	f7 01       	movw	r30, r14
 468:	93 fd       	sbrc	r25, 3
 46a:	85 91       	lpm	r24, Z+
 46c:	93 ff       	sbrs	r25, 3
 46e:	81 91       	ld	r24, Z+
 470:	7f 01       	movw	r14, r30
 472:	88 23       	and	r24, r24
 474:	09 f4       	brne	.+2      	; 0x478 <vfprintf+0x3a>
 476:	ba c1       	rjmp	.+884    	; 0x7ec <vfprintf+0x3ae>
 478:	85 32       	cpi	r24, 0x25	; 37
 47a:	39 f4       	brne	.+14     	; 0x48a <vfprintf+0x4c>
 47c:	93 fd       	sbrc	r25, 3
 47e:	85 91       	lpm	r24, Z+
 480:	93 ff       	sbrs	r25, 3
 482:	81 91       	ld	r24, Z+
 484:	7f 01       	movw	r14, r30
 486:	85 32       	cpi	r24, 0x25	; 37
 488:	29 f4       	brne	.+10     	; 0x494 <vfprintf+0x56>
 48a:	b6 01       	movw	r22, r12
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 16 04 	call	0x82c	; 0x82c <fputc>
 492:	e7 cf       	rjmp	.-50     	; 0x462 <vfprintf+0x24>
 494:	91 2c       	mov	r9, r1
 496:	21 2c       	mov	r2, r1
 498:	31 2c       	mov	r3, r1
 49a:	ff e1       	ldi	r31, 0x1F	; 31
 49c:	f3 15       	cp	r31, r3
 49e:	d8 f0       	brcs	.+54     	; 0x4d6 <vfprintf+0x98>
 4a0:	8b 32       	cpi	r24, 0x2B	; 43
 4a2:	79 f0       	breq	.+30     	; 0x4c2 <vfprintf+0x84>
 4a4:	38 f4       	brcc	.+14     	; 0x4b4 <vfprintf+0x76>
 4a6:	80 32       	cpi	r24, 0x20	; 32
 4a8:	79 f0       	breq	.+30     	; 0x4c8 <vfprintf+0x8a>
 4aa:	83 32       	cpi	r24, 0x23	; 35
 4ac:	a1 f4       	brne	.+40     	; 0x4d6 <vfprintf+0x98>
 4ae:	23 2d       	mov	r18, r3
 4b0:	20 61       	ori	r18, 0x10	; 16
 4b2:	1d c0       	rjmp	.+58     	; 0x4ee <vfprintf+0xb0>
 4b4:	8d 32       	cpi	r24, 0x2D	; 45
 4b6:	61 f0       	breq	.+24     	; 0x4d0 <vfprintf+0x92>
 4b8:	80 33       	cpi	r24, 0x30	; 48
 4ba:	69 f4       	brne	.+26     	; 0x4d6 <vfprintf+0x98>
 4bc:	23 2d       	mov	r18, r3
 4be:	21 60       	ori	r18, 0x01	; 1
 4c0:	16 c0       	rjmp	.+44     	; 0x4ee <vfprintf+0xb0>
 4c2:	83 2d       	mov	r24, r3
 4c4:	82 60       	ori	r24, 0x02	; 2
 4c6:	38 2e       	mov	r3, r24
 4c8:	e3 2d       	mov	r30, r3
 4ca:	e4 60       	ori	r30, 0x04	; 4
 4cc:	3e 2e       	mov	r3, r30
 4ce:	2a c0       	rjmp	.+84     	; 0x524 <vfprintf+0xe6>
 4d0:	f3 2d       	mov	r31, r3
 4d2:	f8 60       	ori	r31, 0x08	; 8
 4d4:	1d c0       	rjmp	.+58     	; 0x510 <vfprintf+0xd2>
 4d6:	37 fc       	sbrc	r3, 7
 4d8:	2d c0       	rjmp	.+90     	; 0x534 <vfprintf+0xf6>
 4da:	20 ed       	ldi	r18, 0xD0	; 208
 4dc:	28 0f       	add	r18, r24
 4de:	2a 30       	cpi	r18, 0x0A	; 10
 4e0:	40 f0       	brcs	.+16     	; 0x4f2 <vfprintf+0xb4>
 4e2:	8e 32       	cpi	r24, 0x2E	; 46
 4e4:	b9 f4       	brne	.+46     	; 0x514 <vfprintf+0xd6>
 4e6:	36 fc       	sbrc	r3, 6
 4e8:	81 c1       	rjmp	.+770    	; 0x7ec <vfprintf+0x3ae>
 4ea:	23 2d       	mov	r18, r3
 4ec:	20 64       	ori	r18, 0x40	; 64
 4ee:	32 2e       	mov	r3, r18
 4f0:	19 c0       	rjmp	.+50     	; 0x524 <vfprintf+0xe6>
 4f2:	36 fe       	sbrs	r3, 6
 4f4:	06 c0       	rjmp	.+12     	; 0x502 <vfprintf+0xc4>
 4f6:	8a e0       	ldi	r24, 0x0A	; 10
 4f8:	98 9e       	mul	r9, r24
 4fa:	20 0d       	add	r18, r0
 4fc:	11 24       	eor	r1, r1
 4fe:	92 2e       	mov	r9, r18
 500:	11 c0       	rjmp	.+34     	; 0x524 <vfprintf+0xe6>
 502:	ea e0       	ldi	r30, 0x0A	; 10
 504:	2e 9e       	mul	r2, r30
 506:	20 0d       	add	r18, r0
 508:	11 24       	eor	r1, r1
 50a:	22 2e       	mov	r2, r18
 50c:	f3 2d       	mov	r31, r3
 50e:	f0 62       	ori	r31, 0x20	; 32
 510:	3f 2e       	mov	r3, r31
 512:	08 c0       	rjmp	.+16     	; 0x524 <vfprintf+0xe6>
 514:	8c 36       	cpi	r24, 0x6C	; 108
 516:	21 f4       	brne	.+8      	; 0x520 <vfprintf+0xe2>
 518:	83 2d       	mov	r24, r3
 51a:	80 68       	ori	r24, 0x80	; 128
 51c:	38 2e       	mov	r3, r24
 51e:	02 c0       	rjmp	.+4      	; 0x524 <vfprintf+0xe6>
 520:	88 36       	cpi	r24, 0x68	; 104
 522:	41 f4       	brne	.+16     	; 0x534 <vfprintf+0xf6>
 524:	f7 01       	movw	r30, r14
 526:	93 fd       	sbrc	r25, 3
 528:	85 91       	lpm	r24, Z+
 52a:	93 ff       	sbrs	r25, 3
 52c:	81 91       	ld	r24, Z+
 52e:	7f 01       	movw	r14, r30
 530:	81 11       	cpse	r24, r1
 532:	b3 cf       	rjmp	.-154    	; 0x49a <vfprintf+0x5c>
 534:	98 2f       	mov	r25, r24
 536:	9f 7d       	andi	r25, 0xDF	; 223
 538:	95 54       	subi	r25, 0x45	; 69
 53a:	93 30       	cpi	r25, 0x03	; 3
 53c:	28 f4       	brcc	.+10     	; 0x548 <vfprintf+0x10a>
 53e:	0c 5f       	subi	r16, 0xFC	; 252
 540:	1f 4f       	sbci	r17, 0xFF	; 255
 542:	9f e3       	ldi	r25, 0x3F	; 63
 544:	99 83       	std	Y+1, r25	; 0x01
 546:	0d c0       	rjmp	.+26     	; 0x562 <vfprintf+0x124>
 548:	83 36       	cpi	r24, 0x63	; 99
 54a:	31 f0       	breq	.+12     	; 0x558 <vfprintf+0x11a>
 54c:	83 37       	cpi	r24, 0x73	; 115
 54e:	71 f0       	breq	.+28     	; 0x56c <vfprintf+0x12e>
 550:	83 35       	cpi	r24, 0x53	; 83
 552:	09 f0       	breq	.+2      	; 0x556 <vfprintf+0x118>
 554:	59 c0       	rjmp	.+178    	; 0x608 <vfprintf+0x1ca>
 556:	21 c0       	rjmp	.+66     	; 0x59a <vfprintf+0x15c>
 558:	f8 01       	movw	r30, r16
 55a:	80 81       	ld	r24, Z
 55c:	89 83       	std	Y+1, r24	; 0x01
 55e:	0e 5f       	subi	r16, 0xFE	; 254
 560:	1f 4f       	sbci	r17, 0xFF	; 255
 562:	88 24       	eor	r8, r8
 564:	83 94       	inc	r8
 566:	91 2c       	mov	r9, r1
 568:	53 01       	movw	r10, r6
 56a:	13 c0       	rjmp	.+38     	; 0x592 <vfprintf+0x154>
 56c:	28 01       	movw	r4, r16
 56e:	f2 e0       	ldi	r31, 0x02	; 2
 570:	4f 0e       	add	r4, r31
 572:	51 1c       	adc	r5, r1
 574:	f8 01       	movw	r30, r16
 576:	a0 80       	ld	r10, Z
 578:	b1 80       	ldd	r11, Z+1	; 0x01
 57a:	36 fe       	sbrs	r3, 6
 57c:	03 c0       	rjmp	.+6      	; 0x584 <vfprintf+0x146>
 57e:	69 2d       	mov	r22, r9
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <vfprintf+0x14a>
 584:	6f ef       	ldi	r22, 0xFF	; 255
 586:	7f ef       	ldi	r23, 0xFF	; 255
 588:	c5 01       	movw	r24, r10
 58a:	0e 94 0b 04 	call	0x816	; 0x816 <strnlen>
 58e:	4c 01       	movw	r8, r24
 590:	82 01       	movw	r16, r4
 592:	f3 2d       	mov	r31, r3
 594:	ff 77       	andi	r31, 0x7F	; 127
 596:	3f 2e       	mov	r3, r31
 598:	16 c0       	rjmp	.+44     	; 0x5c6 <vfprintf+0x188>
 59a:	28 01       	movw	r4, r16
 59c:	22 e0       	ldi	r18, 0x02	; 2
 59e:	42 0e       	add	r4, r18
 5a0:	51 1c       	adc	r5, r1
 5a2:	f8 01       	movw	r30, r16
 5a4:	a0 80       	ld	r10, Z
 5a6:	b1 80       	ldd	r11, Z+1	; 0x01
 5a8:	36 fe       	sbrs	r3, 6
 5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <vfprintf+0x174>
 5ac:	69 2d       	mov	r22, r9
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <vfprintf+0x178>
 5b2:	6f ef       	ldi	r22, 0xFF	; 255
 5b4:	7f ef       	ldi	r23, 0xFF	; 255
 5b6:	c5 01       	movw	r24, r10
 5b8:	0e 94 00 04 	call	0x800	; 0x800 <strnlen_P>
 5bc:	4c 01       	movw	r8, r24
 5be:	f3 2d       	mov	r31, r3
 5c0:	f0 68       	ori	r31, 0x80	; 128
 5c2:	3f 2e       	mov	r3, r31
 5c4:	82 01       	movw	r16, r4
 5c6:	33 fc       	sbrc	r3, 3
 5c8:	1b c0       	rjmp	.+54     	; 0x600 <vfprintf+0x1c2>
 5ca:	82 2d       	mov	r24, r2
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	88 16       	cp	r8, r24
 5d0:	99 06       	cpc	r9, r25
 5d2:	b0 f4       	brcc	.+44     	; 0x600 <vfprintf+0x1c2>
 5d4:	b6 01       	movw	r22, r12
 5d6:	80 e2       	ldi	r24, 0x20	; 32
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 16 04 	call	0x82c	; 0x82c <fputc>
 5de:	2a 94       	dec	r2
 5e0:	f4 cf       	rjmp	.-24     	; 0x5ca <vfprintf+0x18c>
 5e2:	f5 01       	movw	r30, r10
 5e4:	37 fc       	sbrc	r3, 7
 5e6:	85 91       	lpm	r24, Z+
 5e8:	37 fe       	sbrs	r3, 7
 5ea:	81 91       	ld	r24, Z+
 5ec:	5f 01       	movw	r10, r30
 5ee:	b6 01       	movw	r22, r12
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 16 04 	call	0x82c	; 0x82c <fputc>
 5f6:	21 10       	cpse	r2, r1
 5f8:	2a 94       	dec	r2
 5fa:	21 e0       	ldi	r18, 0x01	; 1
 5fc:	82 1a       	sub	r8, r18
 5fe:	91 08       	sbc	r9, r1
 600:	81 14       	cp	r8, r1
 602:	91 04       	cpc	r9, r1
 604:	71 f7       	brne	.-36     	; 0x5e2 <vfprintf+0x1a4>
 606:	e8 c0       	rjmp	.+464    	; 0x7d8 <vfprintf+0x39a>
 608:	84 36       	cpi	r24, 0x64	; 100
 60a:	11 f0       	breq	.+4      	; 0x610 <vfprintf+0x1d2>
 60c:	89 36       	cpi	r24, 0x69	; 105
 60e:	41 f5       	brne	.+80     	; 0x660 <vfprintf+0x222>
 610:	f8 01       	movw	r30, r16
 612:	37 fe       	sbrs	r3, 7
 614:	07 c0       	rjmp	.+14     	; 0x624 <vfprintf+0x1e6>
 616:	60 81       	ld	r22, Z
 618:	71 81       	ldd	r23, Z+1	; 0x01
 61a:	82 81       	ldd	r24, Z+2	; 0x02
 61c:	93 81       	ldd	r25, Z+3	; 0x03
 61e:	0c 5f       	subi	r16, 0xFC	; 252
 620:	1f 4f       	sbci	r17, 0xFF	; 255
 622:	08 c0       	rjmp	.+16     	; 0x634 <vfprintf+0x1f6>
 624:	60 81       	ld	r22, Z
 626:	71 81       	ldd	r23, Z+1	; 0x01
 628:	07 2e       	mov	r0, r23
 62a:	00 0c       	add	r0, r0
 62c:	88 0b       	sbc	r24, r24
 62e:	99 0b       	sbc	r25, r25
 630:	0e 5f       	subi	r16, 0xFE	; 254
 632:	1f 4f       	sbci	r17, 0xFF	; 255
 634:	f3 2d       	mov	r31, r3
 636:	ff 76       	andi	r31, 0x6F	; 111
 638:	3f 2e       	mov	r3, r31
 63a:	97 ff       	sbrs	r25, 7
 63c:	09 c0       	rjmp	.+18     	; 0x650 <vfprintf+0x212>
 63e:	90 95       	com	r25
 640:	80 95       	com	r24
 642:	70 95       	com	r23
 644:	61 95       	neg	r22
 646:	7f 4f       	sbci	r23, 0xFF	; 255
 648:	8f 4f       	sbci	r24, 0xFF	; 255
 64a:	9f 4f       	sbci	r25, 0xFF	; 255
 64c:	f0 68       	ori	r31, 0x80	; 128
 64e:	3f 2e       	mov	r3, r31
 650:	2a e0       	ldi	r18, 0x0A	; 10
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	a3 01       	movw	r20, r6
 656:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__ultoa_invert>
 65a:	88 2e       	mov	r8, r24
 65c:	86 18       	sub	r8, r6
 65e:	45 c0       	rjmp	.+138    	; 0x6ea <vfprintf+0x2ac>
 660:	85 37       	cpi	r24, 0x75	; 117
 662:	31 f4       	brne	.+12     	; 0x670 <vfprintf+0x232>
 664:	23 2d       	mov	r18, r3
 666:	2f 7e       	andi	r18, 0xEF	; 239
 668:	b2 2e       	mov	r11, r18
 66a:	2a e0       	ldi	r18, 0x0A	; 10
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	25 c0       	rjmp	.+74     	; 0x6ba <vfprintf+0x27c>
 670:	93 2d       	mov	r25, r3
 672:	99 7f       	andi	r25, 0xF9	; 249
 674:	b9 2e       	mov	r11, r25
 676:	8f 36       	cpi	r24, 0x6F	; 111
 678:	c1 f0       	breq	.+48     	; 0x6aa <vfprintf+0x26c>
 67a:	18 f4       	brcc	.+6      	; 0x682 <vfprintf+0x244>
 67c:	88 35       	cpi	r24, 0x58	; 88
 67e:	79 f0       	breq	.+30     	; 0x69e <vfprintf+0x260>
 680:	b5 c0       	rjmp	.+362    	; 0x7ec <vfprintf+0x3ae>
 682:	80 37       	cpi	r24, 0x70	; 112
 684:	19 f0       	breq	.+6      	; 0x68c <vfprintf+0x24e>
 686:	88 37       	cpi	r24, 0x78	; 120
 688:	21 f0       	breq	.+8      	; 0x692 <vfprintf+0x254>
 68a:	b0 c0       	rjmp	.+352    	; 0x7ec <vfprintf+0x3ae>
 68c:	e9 2f       	mov	r30, r25
 68e:	e0 61       	ori	r30, 0x10	; 16
 690:	be 2e       	mov	r11, r30
 692:	b4 fe       	sbrs	r11, 4
 694:	0d c0       	rjmp	.+26     	; 0x6b0 <vfprintf+0x272>
 696:	fb 2d       	mov	r31, r11
 698:	f4 60       	ori	r31, 0x04	; 4
 69a:	bf 2e       	mov	r11, r31
 69c:	09 c0       	rjmp	.+18     	; 0x6b0 <vfprintf+0x272>
 69e:	34 fe       	sbrs	r3, 4
 6a0:	0a c0       	rjmp	.+20     	; 0x6b6 <vfprintf+0x278>
 6a2:	29 2f       	mov	r18, r25
 6a4:	26 60       	ori	r18, 0x06	; 6
 6a6:	b2 2e       	mov	r11, r18
 6a8:	06 c0       	rjmp	.+12     	; 0x6b6 <vfprintf+0x278>
 6aa:	28 e0       	ldi	r18, 0x08	; 8
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	05 c0       	rjmp	.+10     	; 0x6ba <vfprintf+0x27c>
 6b0:	20 e1       	ldi	r18, 0x10	; 16
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <vfprintf+0x27c>
 6b6:	20 e1       	ldi	r18, 0x10	; 16
 6b8:	32 e0       	ldi	r19, 0x02	; 2
 6ba:	f8 01       	movw	r30, r16
 6bc:	b7 fe       	sbrs	r11, 7
 6be:	07 c0       	rjmp	.+14     	; 0x6ce <vfprintf+0x290>
 6c0:	60 81       	ld	r22, Z
 6c2:	71 81       	ldd	r23, Z+1	; 0x01
 6c4:	82 81       	ldd	r24, Z+2	; 0x02
 6c6:	93 81       	ldd	r25, Z+3	; 0x03
 6c8:	0c 5f       	subi	r16, 0xFC	; 252
 6ca:	1f 4f       	sbci	r17, 0xFF	; 255
 6cc:	06 c0       	rjmp	.+12     	; 0x6da <vfprintf+0x29c>
 6ce:	60 81       	ld	r22, Z
 6d0:	71 81       	ldd	r23, Z+1	; 0x01
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 5f       	subi	r16, 0xFE	; 254
 6d8:	1f 4f       	sbci	r17, 0xFF	; 255
 6da:	a3 01       	movw	r20, r6
 6dc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__ultoa_invert>
 6e0:	88 2e       	mov	r8, r24
 6e2:	86 18       	sub	r8, r6
 6e4:	fb 2d       	mov	r31, r11
 6e6:	ff 77       	andi	r31, 0x7F	; 127
 6e8:	3f 2e       	mov	r3, r31
 6ea:	36 fe       	sbrs	r3, 6
 6ec:	0d c0       	rjmp	.+26     	; 0x708 <vfprintf+0x2ca>
 6ee:	23 2d       	mov	r18, r3
 6f0:	2e 7f       	andi	r18, 0xFE	; 254
 6f2:	a2 2e       	mov	r10, r18
 6f4:	89 14       	cp	r8, r9
 6f6:	58 f4       	brcc	.+22     	; 0x70e <vfprintf+0x2d0>
 6f8:	34 fe       	sbrs	r3, 4
 6fa:	0b c0       	rjmp	.+22     	; 0x712 <vfprintf+0x2d4>
 6fc:	32 fc       	sbrc	r3, 2
 6fe:	09 c0       	rjmp	.+18     	; 0x712 <vfprintf+0x2d4>
 700:	83 2d       	mov	r24, r3
 702:	8e 7e       	andi	r24, 0xEE	; 238
 704:	a8 2e       	mov	r10, r24
 706:	05 c0       	rjmp	.+10     	; 0x712 <vfprintf+0x2d4>
 708:	b8 2c       	mov	r11, r8
 70a:	a3 2c       	mov	r10, r3
 70c:	03 c0       	rjmp	.+6      	; 0x714 <vfprintf+0x2d6>
 70e:	b8 2c       	mov	r11, r8
 710:	01 c0       	rjmp	.+2      	; 0x714 <vfprintf+0x2d6>
 712:	b9 2c       	mov	r11, r9
 714:	a4 fe       	sbrs	r10, 4
 716:	0f c0       	rjmp	.+30     	; 0x736 <vfprintf+0x2f8>
 718:	fe 01       	movw	r30, r28
 71a:	e8 0d       	add	r30, r8
 71c:	f1 1d       	adc	r31, r1
 71e:	80 81       	ld	r24, Z
 720:	80 33       	cpi	r24, 0x30	; 48
 722:	21 f4       	brne	.+8      	; 0x72c <vfprintf+0x2ee>
 724:	9a 2d       	mov	r25, r10
 726:	99 7e       	andi	r25, 0xE9	; 233
 728:	a9 2e       	mov	r10, r25
 72a:	09 c0       	rjmp	.+18     	; 0x73e <vfprintf+0x300>
 72c:	a2 fe       	sbrs	r10, 2
 72e:	06 c0       	rjmp	.+12     	; 0x73c <vfprintf+0x2fe>
 730:	b3 94       	inc	r11
 732:	b3 94       	inc	r11
 734:	04 c0       	rjmp	.+8      	; 0x73e <vfprintf+0x300>
 736:	8a 2d       	mov	r24, r10
 738:	86 78       	andi	r24, 0x86	; 134
 73a:	09 f0       	breq	.+2      	; 0x73e <vfprintf+0x300>
 73c:	b3 94       	inc	r11
 73e:	a3 fc       	sbrc	r10, 3
 740:	11 c0       	rjmp	.+34     	; 0x764 <vfprintf+0x326>
 742:	a0 fe       	sbrs	r10, 0
 744:	06 c0       	rjmp	.+12     	; 0x752 <vfprintf+0x314>
 746:	b2 14       	cp	r11, r2
 748:	88 f4       	brcc	.+34     	; 0x76c <vfprintf+0x32e>
 74a:	28 0c       	add	r2, r8
 74c:	92 2c       	mov	r9, r2
 74e:	9b 18       	sub	r9, r11
 750:	0e c0       	rjmp	.+28     	; 0x76e <vfprintf+0x330>
 752:	b2 14       	cp	r11, r2
 754:	60 f4       	brcc	.+24     	; 0x76e <vfprintf+0x330>
 756:	b6 01       	movw	r22, r12
 758:	80 e2       	ldi	r24, 0x20	; 32
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 16 04 	call	0x82c	; 0x82c <fputc>
 760:	b3 94       	inc	r11
 762:	f7 cf       	rjmp	.-18     	; 0x752 <vfprintf+0x314>
 764:	b2 14       	cp	r11, r2
 766:	18 f4       	brcc	.+6      	; 0x76e <vfprintf+0x330>
 768:	2b 18       	sub	r2, r11
 76a:	02 c0       	rjmp	.+4      	; 0x770 <vfprintf+0x332>
 76c:	98 2c       	mov	r9, r8
 76e:	21 2c       	mov	r2, r1
 770:	a4 fe       	sbrs	r10, 4
 772:	10 c0       	rjmp	.+32     	; 0x794 <vfprintf+0x356>
 774:	b6 01       	movw	r22, r12
 776:	80 e3       	ldi	r24, 0x30	; 48
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 16 04 	call	0x82c	; 0x82c <fputc>
 77e:	a2 fe       	sbrs	r10, 2
 780:	17 c0       	rjmp	.+46     	; 0x7b0 <vfprintf+0x372>
 782:	a1 fc       	sbrc	r10, 1
 784:	03 c0       	rjmp	.+6      	; 0x78c <vfprintf+0x34e>
 786:	88 e7       	ldi	r24, 0x78	; 120
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	02 c0       	rjmp	.+4      	; 0x790 <vfprintf+0x352>
 78c:	88 e5       	ldi	r24, 0x58	; 88
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	b6 01       	movw	r22, r12
 792:	0c c0       	rjmp	.+24     	; 0x7ac <vfprintf+0x36e>
 794:	8a 2d       	mov	r24, r10
 796:	86 78       	andi	r24, 0x86	; 134
 798:	59 f0       	breq	.+22     	; 0x7b0 <vfprintf+0x372>
 79a:	a1 fe       	sbrs	r10, 1
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <vfprintf+0x364>
 79e:	8b e2       	ldi	r24, 0x2B	; 43
 7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <vfprintf+0x366>
 7a2:	80 e2       	ldi	r24, 0x20	; 32
 7a4:	a7 fc       	sbrc	r10, 7
 7a6:	8d e2       	ldi	r24, 0x2D	; 45
 7a8:	b6 01       	movw	r22, r12
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 16 04 	call	0x82c	; 0x82c <fputc>
 7b0:	89 14       	cp	r8, r9
 7b2:	38 f4       	brcc	.+14     	; 0x7c2 <vfprintf+0x384>
 7b4:	b6 01       	movw	r22, r12
 7b6:	80 e3       	ldi	r24, 0x30	; 48
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 16 04 	call	0x82c	; 0x82c <fputc>
 7be:	9a 94       	dec	r9
 7c0:	f7 cf       	rjmp	.-18     	; 0x7b0 <vfprintf+0x372>
 7c2:	8a 94       	dec	r8
 7c4:	f3 01       	movw	r30, r6
 7c6:	e8 0d       	add	r30, r8
 7c8:	f1 1d       	adc	r31, r1
 7ca:	80 81       	ld	r24, Z
 7cc:	b6 01       	movw	r22, r12
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	0e 94 16 04 	call	0x82c	; 0x82c <fputc>
 7d4:	81 10       	cpse	r8, r1
 7d6:	f5 cf       	rjmp	.-22     	; 0x7c2 <vfprintf+0x384>
 7d8:	22 20       	and	r2, r2
 7da:	09 f4       	brne	.+2      	; 0x7de <vfprintf+0x3a0>
 7dc:	42 ce       	rjmp	.-892    	; 0x462 <vfprintf+0x24>
 7de:	b6 01       	movw	r22, r12
 7e0:	80 e2       	ldi	r24, 0x20	; 32
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 16 04 	call	0x82c	; 0x82c <fputc>
 7e8:	2a 94       	dec	r2
 7ea:	f6 cf       	rjmp	.-20     	; 0x7d8 <vfprintf+0x39a>
 7ec:	f6 01       	movw	r30, r12
 7ee:	86 81       	ldd	r24, Z+6	; 0x06
 7f0:	97 81       	ldd	r25, Z+7	; 0x07
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <vfprintf+0x3ba>
 7f4:	8f ef       	ldi	r24, 0xFF	; 255
 7f6:	9f ef       	ldi	r25, 0xFF	; 255
 7f8:	2b 96       	adiw	r28, 0x0b	; 11
 7fa:	e2 e1       	ldi	r30, 0x12	; 18
 7fc:	0c 94 cc 04 	jmp	0x998	; 0x998 <__epilogue_restores__>

00000800 <strnlen_P>:
 800:	fc 01       	movw	r30, r24
 802:	05 90       	lpm	r0, Z+
 804:	61 50       	subi	r22, 0x01	; 1
 806:	70 40       	sbci	r23, 0x00	; 0
 808:	01 10       	cpse	r0, r1
 80a:	d8 f7       	brcc	.-10     	; 0x802 <strnlen_P+0x2>
 80c:	80 95       	com	r24
 80e:	90 95       	com	r25
 810:	8e 0f       	add	r24, r30
 812:	9f 1f       	adc	r25, r31
 814:	08 95       	ret

00000816 <strnlen>:
 816:	fc 01       	movw	r30, r24
 818:	61 50       	subi	r22, 0x01	; 1
 81a:	70 40       	sbci	r23, 0x00	; 0
 81c:	01 90       	ld	r0, Z+
 81e:	01 10       	cpse	r0, r1
 820:	d8 f7       	brcc	.-10     	; 0x818 <strnlen+0x2>
 822:	80 95       	com	r24
 824:	90 95       	com	r25
 826:	8e 0f       	add	r24, r30
 828:	9f 1f       	adc	r25, r31
 82a:	08 95       	ret

0000082c <fputc>:
 82c:	0f 93       	push	r16
 82e:	1f 93       	push	r17
 830:	cf 93       	push	r28
 832:	df 93       	push	r29
 834:	fb 01       	movw	r30, r22
 836:	23 81       	ldd	r18, Z+3	; 0x03
 838:	21 fd       	sbrc	r18, 1
 83a:	03 c0       	rjmp	.+6      	; 0x842 <fputc+0x16>
 83c:	8f ef       	ldi	r24, 0xFF	; 255
 83e:	9f ef       	ldi	r25, 0xFF	; 255
 840:	2c c0       	rjmp	.+88     	; 0x89a <fputc+0x6e>
 842:	22 ff       	sbrs	r18, 2
 844:	16 c0       	rjmp	.+44     	; 0x872 <fputc+0x46>
 846:	46 81       	ldd	r20, Z+6	; 0x06
 848:	57 81       	ldd	r21, Z+7	; 0x07
 84a:	24 81       	ldd	r18, Z+4	; 0x04
 84c:	35 81       	ldd	r19, Z+5	; 0x05
 84e:	42 17       	cp	r20, r18
 850:	53 07       	cpc	r21, r19
 852:	44 f4       	brge	.+16     	; 0x864 <fputc+0x38>
 854:	a0 81       	ld	r26, Z
 856:	b1 81       	ldd	r27, Z+1	; 0x01
 858:	9d 01       	movw	r18, r26
 85a:	2f 5f       	subi	r18, 0xFF	; 255
 85c:	3f 4f       	sbci	r19, 0xFF	; 255
 85e:	31 83       	std	Z+1, r19	; 0x01
 860:	20 83       	st	Z, r18
 862:	8c 93       	st	X, r24
 864:	26 81       	ldd	r18, Z+6	; 0x06
 866:	37 81       	ldd	r19, Z+7	; 0x07
 868:	2f 5f       	subi	r18, 0xFF	; 255
 86a:	3f 4f       	sbci	r19, 0xFF	; 255
 86c:	37 83       	std	Z+7, r19	; 0x07
 86e:	26 83       	std	Z+6, r18	; 0x06
 870:	14 c0       	rjmp	.+40     	; 0x89a <fputc+0x6e>
 872:	8b 01       	movw	r16, r22
 874:	ec 01       	movw	r28, r24
 876:	fb 01       	movw	r30, r22
 878:	00 84       	ldd	r0, Z+8	; 0x08
 87a:	f1 85       	ldd	r31, Z+9	; 0x09
 87c:	e0 2d       	mov	r30, r0
 87e:	09 95       	icall
 880:	89 2b       	or	r24, r25
 882:	e1 f6       	brne	.-72     	; 0x83c <fputc+0x10>
 884:	d8 01       	movw	r26, r16
 886:	16 96       	adiw	r26, 0x06	; 6
 888:	8d 91       	ld	r24, X+
 88a:	9c 91       	ld	r25, X
 88c:	17 97       	sbiw	r26, 0x07	; 7
 88e:	01 96       	adiw	r24, 0x01	; 1
 890:	17 96       	adiw	r26, 0x07	; 7
 892:	9c 93       	st	X, r25
 894:	8e 93       	st	-X, r24
 896:	16 97       	sbiw	r26, 0x06	; 6
 898:	ce 01       	movw	r24, r28
 89a:	df 91       	pop	r29
 89c:	cf 91       	pop	r28
 89e:	1f 91       	pop	r17
 8a0:	0f 91       	pop	r16
 8a2:	08 95       	ret

000008a4 <__ultoa_invert>:
 8a4:	fa 01       	movw	r30, r20
 8a6:	aa 27       	eor	r26, r26
 8a8:	28 30       	cpi	r18, 0x08	; 8
 8aa:	51 f1       	breq	.+84     	; 0x900 <__stack+0x1>
 8ac:	20 31       	cpi	r18, 0x10	; 16
 8ae:	81 f1       	breq	.+96     	; 0x910 <__stack+0x11>
 8b0:	e8 94       	clt
 8b2:	6f 93       	push	r22
 8b4:	6e 7f       	andi	r22, 0xFE	; 254
 8b6:	6e 5f       	subi	r22, 0xFE	; 254
 8b8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ba:	8f 4f       	sbci	r24, 0xFF	; 255
 8bc:	9f 4f       	sbci	r25, 0xFF	; 255
 8be:	af 4f       	sbci	r26, 0xFF	; 255
 8c0:	b1 e0       	ldi	r27, 0x01	; 1
 8c2:	3e d0       	rcall	.+124    	; 0x940 <__stack+0x41>
 8c4:	b4 e0       	ldi	r27, 0x04	; 4
 8c6:	3c d0       	rcall	.+120    	; 0x940 <__stack+0x41>
 8c8:	67 0f       	add	r22, r23
 8ca:	78 1f       	adc	r23, r24
 8cc:	89 1f       	adc	r24, r25
 8ce:	9a 1f       	adc	r25, r26
 8d0:	a1 1d       	adc	r26, r1
 8d2:	68 0f       	add	r22, r24
 8d4:	79 1f       	adc	r23, r25
 8d6:	8a 1f       	adc	r24, r26
 8d8:	91 1d       	adc	r25, r1
 8da:	a1 1d       	adc	r26, r1
 8dc:	6a 0f       	add	r22, r26
 8de:	71 1d       	adc	r23, r1
 8e0:	81 1d       	adc	r24, r1
 8e2:	91 1d       	adc	r25, r1
 8e4:	a1 1d       	adc	r26, r1
 8e6:	20 d0       	rcall	.+64     	; 0x928 <__stack+0x29>
 8e8:	09 f4       	brne	.+2      	; 0x8ec <__ultoa_invert+0x48>
 8ea:	68 94       	set
 8ec:	3f 91       	pop	r19
 8ee:	2a e0       	ldi	r18, 0x0A	; 10
 8f0:	26 9f       	mul	r18, r22
 8f2:	11 24       	eor	r1, r1
 8f4:	30 19       	sub	r19, r0
 8f6:	30 5d       	subi	r19, 0xD0	; 208
 8f8:	31 93       	st	Z+, r19
 8fa:	de f6       	brtc	.-74     	; 0x8b2 <__ultoa_invert+0xe>
 8fc:	cf 01       	movw	r24, r30
 8fe:	08 95       	ret
 900:	46 2f       	mov	r20, r22
 902:	47 70       	andi	r20, 0x07	; 7
 904:	40 5d       	subi	r20, 0xD0	; 208
 906:	41 93       	st	Z+, r20
 908:	b3 e0       	ldi	r27, 0x03	; 3
 90a:	0f d0       	rcall	.+30     	; 0x92a <__stack+0x2b>
 90c:	c9 f7       	brne	.-14     	; 0x900 <__stack+0x1>
 90e:	f6 cf       	rjmp	.-20     	; 0x8fc <__ultoa_invert+0x58>
 910:	46 2f       	mov	r20, r22
 912:	4f 70       	andi	r20, 0x0F	; 15
 914:	40 5d       	subi	r20, 0xD0	; 208
 916:	4a 33       	cpi	r20, 0x3A	; 58
 918:	18 f0       	brcs	.+6      	; 0x920 <__stack+0x21>
 91a:	49 5d       	subi	r20, 0xD9	; 217
 91c:	31 fd       	sbrc	r19, 1
 91e:	40 52       	subi	r20, 0x20	; 32
 920:	41 93       	st	Z+, r20
 922:	02 d0       	rcall	.+4      	; 0x928 <__stack+0x29>
 924:	a9 f7       	brne	.-22     	; 0x910 <__stack+0x11>
 926:	ea cf       	rjmp	.-44     	; 0x8fc <__ultoa_invert+0x58>
 928:	b4 e0       	ldi	r27, 0x04	; 4
 92a:	a6 95       	lsr	r26
 92c:	97 95       	ror	r25
 92e:	87 95       	ror	r24
 930:	77 95       	ror	r23
 932:	67 95       	ror	r22
 934:	ba 95       	dec	r27
 936:	c9 f7       	brne	.-14     	; 0x92a <__stack+0x2b>
 938:	00 97       	sbiw	r24, 0x00	; 0
 93a:	61 05       	cpc	r22, r1
 93c:	71 05       	cpc	r23, r1
 93e:	08 95       	ret
 940:	9b 01       	movw	r18, r22
 942:	ac 01       	movw	r20, r24
 944:	0a 2e       	mov	r0, r26
 946:	06 94       	lsr	r0
 948:	57 95       	ror	r21
 94a:	47 95       	ror	r20
 94c:	37 95       	ror	r19
 94e:	27 95       	ror	r18
 950:	ba 95       	dec	r27
 952:	c9 f7       	brne	.-14     	; 0x946 <__stack+0x47>
 954:	62 0f       	add	r22, r18
 956:	73 1f       	adc	r23, r19
 958:	84 1f       	adc	r24, r20
 95a:	95 1f       	adc	r25, r21
 95c:	a0 1d       	adc	r26, r0
 95e:	08 95       	ret

00000960 <__prologue_saves__>:
 960:	2f 92       	push	r2
 962:	3f 92       	push	r3
 964:	4f 92       	push	r4
 966:	5f 92       	push	r5
 968:	6f 92       	push	r6
 96a:	7f 92       	push	r7
 96c:	8f 92       	push	r8
 96e:	9f 92       	push	r9
 970:	af 92       	push	r10
 972:	bf 92       	push	r11
 974:	cf 92       	push	r12
 976:	df 92       	push	r13
 978:	ef 92       	push	r14
 97a:	ff 92       	push	r15
 97c:	0f 93       	push	r16
 97e:	1f 93       	push	r17
 980:	cf 93       	push	r28
 982:	df 93       	push	r29
 984:	cd b7       	in	r28, 0x3d	; 61
 986:	de b7       	in	r29, 0x3e	; 62
 988:	ca 1b       	sub	r28, r26
 98a:	db 0b       	sbc	r29, r27
 98c:	0f b6       	in	r0, 0x3f	; 63
 98e:	f8 94       	cli
 990:	de bf       	out	0x3e, r29	; 62
 992:	0f be       	out	0x3f, r0	; 63
 994:	cd bf       	out	0x3d, r28	; 61
 996:	09 94       	ijmp

00000998 <__epilogue_restores__>:
 998:	2a 88       	ldd	r2, Y+18	; 0x12
 99a:	39 88       	ldd	r3, Y+17	; 0x11
 99c:	48 88       	ldd	r4, Y+16	; 0x10
 99e:	5f 84       	ldd	r5, Y+15	; 0x0f
 9a0:	6e 84       	ldd	r6, Y+14	; 0x0e
 9a2:	7d 84       	ldd	r7, Y+13	; 0x0d
 9a4:	8c 84       	ldd	r8, Y+12	; 0x0c
 9a6:	9b 84       	ldd	r9, Y+11	; 0x0b
 9a8:	aa 84       	ldd	r10, Y+10	; 0x0a
 9aa:	b9 84       	ldd	r11, Y+9	; 0x09
 9ac:	c8 84       	ldd	r12, Y+8	; 0x08
 9ae:	df 80       	ldd	r13, Y+7	; 0x07
 9b0:	ee 80       	ldd	r14, Y+6	; 0x06
 9b2:	fd 80       	ldd	r15, Y+5	; 0x05
 9b4:	0c 81       	ldd	r16, Y+4	; 0x04
 9b6:	1b 81       	ldd	r17, Y+3	; 0x03
 9b8:	aa 81       	ldd	r26, Y+2	; 0x02
 9ba:	b9 81       	ldd	r27, Y+1	; 0x01
 9bc:	ce 0f       	add	r28, r30
 9be:	d1 1d       	adc	r29, r1
 9c0:	0f b6       	in	r0, 0x3f	; 63
 9c2:	f8 94       	cli
 9c4:	de bf       	out	0x3e, r29	; 62
 9c6:	0f be       	out	0x3f, r0	; 63
 9c8:	cd bf       	out	0x3d, r28	; 61
 9ca:	ed 01       	movw	r28, r26
 9cc:	08 95       	ret

000009ce <_exit>:
 9ce:	f8 94       	cli

000009d0 <__stop_program>:
 9d0:	ff cf       	rjmp	.-2      	; 0x9d0 <__stop_program>
